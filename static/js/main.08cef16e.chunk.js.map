{"version":3,"sources":["logo.svg","components/Wrapper/index.js","components/Head/index.js","utils/API.js","utils/DataContext.js","components/Search/index.js","components/Nav/index.js","components/DataCard/index.js","components/DataBody/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","children","className","Head","Axios","get","DataAreaContext","React","createContext","Search","context","useContext","DataContext","type","placeholder","onChange","e","handleSearchChange","target","value","Nav","change","DataCard","props","name","style","width","src","picture","large","alt","first","last","gender","email","phone","location","city","state","DataBody","useState","users","setUsers","filteredUsers","setFilteredUsers","sortedUsers","setSortedUsers","activeUser","setActiveUser","inc","setInc","useEffect","API","then","results","data","console","log","newResults","map","a","handleSort","key","sorted","sort","b","Provider","val","filtered","filter","user","toLowerCase","includes","class","scope","onClick","i","thumbnail","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08cef16e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\n\nfunction Wrapper ({ children }){\n    return (\n        <div className=\"wrapper\">\n            { children }\n        </div>\n    );\n};\nexport default Wrapper;","import React from \"react\";\nimport \"./styles.css\";\n\nfunction Head (){\n    return (\n        <div className=\"head\">\n            <h1>Employee Directory</h1>\n            <h3>Filter or Search for Result</h3>\n        </div>\n    );\n};\nexport default Head;","import Axios from \"axios\";\n\nexport default{ \n    getUsers:function(){    \n        return Axios.get(\"https://cors-anywhere.herokuapp.com/https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React from \"react\";\n\nconst DataAreaContext = React.createContext({\n});\nexport default DataAreaContext;","import React, { useContext } from \"react\";\nimport DataContext from \"../../utils/DataContext.js\";\n\nfunction Search (){\n    const context = useContext(DataContext);\n    return (\n        <div className=\"searchname\">\n            <form className=\"form-inline\">\n                <input\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    onChange={e=> context.handleSearchChange(e.target.value)}\n                    />\n                <button className=\"btn\" type=\"submit\">\n                Search\n                </button>\n            </form>\n        </div>\n    );\n};\nexport default Search;","import React from \"react\";\nimport Search from \"../Search/index\";\n\nfunction Nav ({change}){\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"search-area\">\n                <Search change={change}/>\n            </div>\n        </nav>\n    );\n};\nexport default Nav;","import React from \"react\";\n\nfunction DataCard(props) {\n    return (\n    props.name ? <div className=\"card\" style={{width: \"18rem\"}}>\n  <img src={props.picture?.large} className=\"card-img-top\" alt=\"...\"/>\n  <div className=\"card-body\">\n    <h5 className=\"card-title\">{props.name.first} {props.name.last}</h5>\n  </div>\n  <ul className=\"list-group list-group-flush\">\n    <li className=\"list-group-item\">Gender: {props.gender}</li>\n    <li className=\"list-group-item\">Email: {props.email}</li>\n    <li className=\"list-group-item\">Phone: {props.phone}</li>\n    <li className=\"list-group-item\">Location: {props.location.city}, {props.location.state}</li>\n  </ul>\n</div> : \"\"\n\n    )\n};\nexport default DataCard;","import React, { useState, useContext, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport DataContext from \"../../utils/DataContext\";\nimport Nav from \"../Nav/index\";\nimport DataCard from '../DataCard'\nimport { filter } from \"async\";\n\nfunction DataBody() {\n    const [users, setUsers] = useState([]);\n    const [filteredUsers, setFilteredUsers] = useState([]);\n    const [sortedUsers, setSortedUsers] = useState({users:[]});\n    const [activeUser, setActiveUser] = useState(null);\n    const [inc, setInc] = useState(1);\n    const handleSearchChange = val => {\n        //do some filtering with value\n        const filtered = users.filter(user => user.first.toLowerCase().includes(val) || user.last.toLowerCase().includes(val));\n        setFilteredUsers(filtered);\n        setSortedUsers({users:filtered})\n    }\n    useEffect(() => {\n        API.getUsers()\n            .then(({ data: { results } }) => {\n                console.log(results[0])\n                const newResults = results.map(a => ({...a,first:a.name.first, last:a.name.last}))\n                setFilteredUsers(newResults);\n                setUsers(newResults);\n                setSortedUsers({users:newResults})\n            })\n    }, [])\n    const handleSort = key => {\n        //do some sort here\n        const sorted = filteredUsers.sort((a,b)=> a[key] < b[key] ? -1*inc : a[key] > b[key] ? 1*inc : 0);\n        setInc(-inc);\n        setSortedUsers({users:sorted})\n    }\n    \n    return (\n        <DataContext.Provider value={{ handleSearchChange }}>\n            <Nav />\n            <div className=\"row\">\n                <div className=\"col-6\">\n                    <table class=\"table table-striped table-dark\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Image</th>\n                                <th onClick={()=>handleSort(\"first\")} scope=\"col\">First</th>\n                                <th onClick={()=>handleSort(\"last\")} scope=\"col\">Last</th>\n                                <th onClick={()=>handleSort(\"email\")} scope=\"col\">Email</th>\n                                <th onClick={()=>handleSort(\"phone\")} scope=\"col\">Phone</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {sortedUsers.users.map((a, i) => {\n                                return <tr onClick={() => setActiveUser(i)}>\n                                    <td><img src={a.picture.thumbnail} /></td>\n                                    <td>{a.first}</td>\n                                    <td>{a.last}</td>\n                                    <td>{a.email}</td>\n                                    <td>{a.phone}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"col-6\">\n                    <DataCard {...filteredUsers[activeUser]} />\n                </div>\n            </div>\n        </DataContext.Provider>\n    )\n};\nexport default DataBody;","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport Wrapper from './components/Wrapper/index.js';\nimport Head from './components/Head/index.js';\nimport Main from './components/DataBody/index.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n      <Head />\n      <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}